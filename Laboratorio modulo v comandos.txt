comando para habilitar repositorios:
sudo dnf config-manager --set-enabled nombre_del_repositorio  
sudo dnf config-manager --set-enabled \*  

Laboratorio modulo v

Practica 1: Syncronizacion de carpetas con Rsync (1Pts)

Crear una carpeta en su servidor primario y dentro crear 100 archivos (con el comando touch)
Utilizando rsync, copiar el contenido de la carpeta a el servidor remoto
Crear un script con el comando de sincronizacion de la carpeta y luego crear un crontab para que se sincronizen cada 1 minuto. cree un archivo en el server primario y luego compruebe que el crontab esta funcionando validando en el servidor secundario si la carpeta se creo

1- en el nodo 1 crear la carpeta que tendrá los 100 archivos:

sudo mkdir carpeta

2- crear los archivos

sudo touch archivo{1..100}.txt

3- en el nodo 2 crear una carpeta en donde estarán todos los archivos

sudo mkdir archivos-recibidos

4- en el nodo 1 usar rsync y enviar los archivos al nodo 2

rsync -av carpeta/ usuarioremoto@ip:/home/usuarioremoto/carpetadestino/

5- crear un script con el comando rsync

sudo vi escript.sh
#!/bin/bash

rsync -av /home/20240916-AH/archivos/ ahernandez@192.168.1.38:/home/ahernandez/recibir/

sudo chmod u+x escript.sh

6- probar el script

./escript.sh

7- crear una tarea crontab para que ejecute el script cada 1 minuto

crontab -e
* * * * * /home/20240916-AH/./escript.sh

8- comprobar en el nodo 2.

ls recibir/

*********************************************************************

Practica 2: Instalacion y configuracion del Cluster (2Pts)

Instalar un Cluster de Alta disponibilidad (Utilizando la herramienta Heartbeat o Pacemaker) con 2 nodos (Servidor) en modo bridge . Configurar una IP flotante para que el cluster funcione utilizando una misma Direccion IP
Realizar las pruebas haciendo ping a la ip flotante provista por la solucion de HA y altarnando reinicios entre los servidores, el ping debe de mantenerse

Configuración de un Clúster de Alta Disponibilidad con Pacemaker y Corosync en Red Hat/Rocky Linux.

*******************************************************************
1- Instalar los paquetes pacemaker, corosync y pcs:

sudo dnf install -y pacemaker corosync pcs

2- Habilitar los servicios:

sudo systemctl enable --now pcsd corosync pacemaker

- Crear una contraseña para el usuario hacluster en ambos nodos:

passwd hacluster

- Autenticacion entre nodos (ejecutar solo en node1):

sudo pcs host auth node1 (direccion ip) node2 (o direccion ip) -u hacluster

nota: pcs host auth nodo1 nodo2: Autentica ambos nodos usando la cuenta hacluster.

3- Crear y configurar el cluster:

sudo pcs cluster setup mi_cluster node1 node2

-Iniciar el cluster en ambos nodos:

sudo pcs cluster start --all

- Habilitar el arranque automatic el cluster:

sudo pcs cluster enable --all

- Verificar el estado del cluster:

sudo pcs status

4 - Si luego de agregarle recursos al cluster, estos permanecen en stop, entonces desabilitar stonith y ajustar el quorum:

sudo pcs property set stonith-enabled=false
sudo pcs property set no-quorum-policy=ignore

5- Crear recurso de ip flotante en el cluster:

sudo pcs resource create IP_Flotante ocf:heartbeat:IPaddr2 ip=192.168.1.100 cidr_netmask=24 op monitor interval=30s

NOTA:

ocf:heartbeat:IPaddr2: Recurso de IP flotante.
ip=192.168.1.100: IP virtual del clúster.
cidr_netmask=24: Máscara de red.
op monitor interval=30s: Verifica cada 30 segundos si la IP está activa.

6- Probar el cluster

ping 192.168.1.100


**** Eliminar un recurso de un cluster*****

sudo pcs resource delete NOMBRE DEL RECURSO


*************************************************************

Practica 3: Cluster de Alta Disponibilidad HTTP (1Pts)

Configura 2 servidores web (apache/NGINX). En cada uno desplieque una pagina html que especifique que servidor es (server1, Server2)
Implementar HA en los servidores utilizando  KeepAlived. Validar  la Alta Disponibilidad del servicio apagando uno de los servidores y y accediendo al servicio de apache a traves de un navegador.

node1:
cd /var/www/html/
sudo vi index.html

node2: 

cd /var/www/htmld/
sudo vi index.html

- Instalar keepalived en ambos nodos

sudo dnf install keepalived
sudo systemctl enable --now keepalived
cd /etc/keepalived/
sudo vi keepalived.conf

- Agregar la siguiente configuracion:

vrrp_instance VI_1 {
    state BACKUP
    interface ens160
    virtual_router_id 50
    priority 80
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        192.168.1.40
    }
}

sudo systemctl restart keepalived

- desde la maquina principal (windows) hacer ping hacia la ip  192.168.1.40

- Reiniciar uno de los nodos

sudo reboot
********************************************************
