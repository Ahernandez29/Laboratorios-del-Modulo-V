comando para habilitar repositorios:
sudo dnf config-manager --set-enabled nombre_del_repositorio  
sudo dnf config-manager --set-enabled \*  

Laboratorio modulo v

Practica 1: Syncronizacion de carpetas con Rsync (1Pts)

Crear una carpeta en su servidor primario y dentro crear 100 archivos (con el comando touch)
Utilizando rsync, copiar el contenido de la carpeta a el servidor remoto
Crear un script con el comando de sincronizacion de la carpeta y luego crear un crontab para que se sincronizen cada 1 minuto. cree un archivo en el server primario y luego compruebe que el crontab esta funcionando validando en el servidor secundario si la carpeta se creo

1- en el nodo 1 crear la carpeta que tendr√° los 100 archivos:

sudo mkdir carpeta

2- crear los archivos

sudo touch archivo{1..100}.txt

3- en el nodo 2 crear una carpeta en donde estar√°n todos los archivos

sudo mkdir archivos-recibidos

4- en el nodo 1 usar rsync y enviar los archivos al nodo 2

rsync -av carpeta/ usuarioremoto@ip:/home/usuarioremoto/carpetadestino/

5- crear un script con el comando rsync

sudo vi escript.sh
#!/bin/bash

rsync -av /home/20240916-AH/archivos/ ahernandez@192.168.1.38:/home/ahernandez/recibir/

sudo chmod u+x escript.sh

6- probar el script

./escript.sh

7- crear una tarea crontab para que ejecute el script cada 1 minuto

crontab -e
* * * * * /home/20240916-AH/./escript.sh

8- comprobar en el nodo 2.

ls recibir/

*********************************************************************

Practica 2: Instalacion y configuracion del Cluster (2Pts)

Instalar un Cluster de Alta disponibilidad (Utilizando la herramienta Heartbeat o Pacemaker) con 2 nodos (Servidor) en modo bridge . Configurar una IP flotante para que el cluster funcione utilizando una misma Direccion IP
Realizar las pruebas haciendo ping a la ip flotante provista por la solucion de HA y altarnando reinicios entre los servidores, el ping debe de mantenerse

Configuraci√≥n de un Cl√∫ster de Alta Disponibilidad con Pacemaker y Corosync en Red Hat/Rocky Linux.

*******************************************************************
1- Instalar los paquetes pacemaker, corosync y pcs:

sudo dnf install -y pacemaker corosync pcs

2- Habilitar los servicios:

sudo systemctl enable --now pcsd corosync pacemaker

- Crear una contrase√±a para el usuario hacluster en ambos nodos:

passwd hacluster

- Autenticacion entre nodos (ejecutar solo en node1):

sudo pcs host auth node1 (direccion ip) node2 (o direccion ip) -u hacluster

nota: pcs host auth nodo1 nodo2: Autentica ambos nodos usando la cuenta hacluster.

3- Crear y configurar el cluster:

sudo pcs cluster setup mi_cluster node1 node2

-Iniciar el cluster en ambos nodos:

sudo pcs cluster start --all

- Habilitar el arranque automatic el cluster:

sudo pcs cluster enable --all

- Verificar el estado del cluster:

sudo pcs status

4 - Si luego de agregarle recursos al cluster, estos permanecen en stop, entonces desabilitar stonith y ajustar el quorum:

sudo pcs property set stonith-enabled=false
sudo pcs property set no-quorum-policy=ignore

5- Crear recurso de ip flotante en el cluster:

sudo pcs resource create IP_Flotante ocf:heartbeat:IPaddr2 ip=192.168.1.100 cidr_netmask=24 op monitor interval=30s

NOTA:

ocf:heartbeat:IPaddr2: Recurso de IP flotante.
ip=192.168.1.100: IP virtual del cl√∫ster.
cidr_netmask=24: M√°scara de red.
op monitor interval=30s: Verifica cada 30 segundos si la IP est√° activa.

6- Probar el cluster

ping 192.168.1.100


**** Eliminar un recurso de un cluster*****

sudo pcs resource delete NOMBRE DEL RECURSO


*************************************************************

Practica 3: Cluster de Alta Disponibilidad HTTP (1Pts)

Configura 2 servidores web (apache/NGINX). En cada uno desplieque una pagina html que especifique que servidor es (server1, Server2)
Implementar HA en los servidores utilizando  KeepAlived. Validar  la Alta Disponibilidad del servicio apagando uno de los servidores y y accediendo al servicio de apache a traves de un navegador.

node1:
cd /var/www/html/
sudo vi index.html

node2: 

cd /var/www/html/
sudo vi index.html

- Instalar keepalived en ambos nodos

sudo dnf install keepalived
sudo systemctl enable --now keepalived
cd /etc/keepalived/
sudo vi keepalived.conf

- Agregar la siguiente configuracion:

vrrp_instance VI_1 {
    state MASTER EN EL NODO PRINCIPAL Y BACKUP EN LOS DEMAS
    interface ens160
    virtual_router_id 50
    priority 80
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1234
    }
    virtual_ipaddress {
        192.168.1.40
    }
}

sudo systemctl restart keepalived

- desde la maquina principal (windows) hacer ping hacia la ip  192.168.1.40

- Reiniciar uno de los nodos

sudo reboot
********************************************************

-COMANDOS PARA AGREGAR UNA BASE DE DATOS AL CLUSTER:

1- INSTALAR MARIADB EN AMBOS NODOS:

sudo dnf install -y mariadb-server

ojo: No habilites ni inicies el servicio con systemctl, Pacemaker lo har√° por ti.

2- Configurar MariaDB para que escuche en todas las IPs
Edita el archivo:

sudo nano /etc/my.cnf.d/mariadb-server.cnf

Agrega o modifica dentro de [mysqld]:

bind-address=0.0.0.0

Haz esto en ambos nodos.

3. Iniciar MariaDB temporalmente para configuraci√≥n inicial
Solo en el nodo principal (nodo donde iniciar√°s la BD primero):

sudo systemctl start mariadb

-Ejecuta el asistente de seguridad:

sudo mysql_secure_installation

- Luego crea el usuario remoto (desde consola de MySQL):

CREATE USER 'root'@'%' IDENTIFIED BY 'tu_contrase√±a';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;

- Apaga MariaDB antes de pasar a Pacemaker:

sudo systemctl stop mariadb

 4. Agregar el recurso MariaDB al cl√∫ster
üß± A) Recurso MariaDB:

sudo pcs resource create MariaDB systemd:mariadb --group DBGrupo op monitor interval=30s

üìå Explicaci√≥n:

MariaDB: Nombre del recurso.

systemd:mariadb: Tipo de recurso (servicio).

--group DBGrupo: Opcional para agrupar con otros recursos como IP flotante.

monitor: Verifica si el servicio sigue activo cada 30 segundos.

 5. Agregar una IP flotante (opcional pero recomendado)
Esto permite que los clientes siempre se conecten a la misma IP, sin importar en qu√© nodo est√© MariaDB.

sudo pcs resource create DB-IP ocf:heartbeat:IPaddr2 ip=192.168.1.150 cidr_netmask=24 op monitor interval=30s

Agr√©gala al mismo grupo:

sudo pcs resource group add DBGrupo DB-IP

 6. Verificar el cl√∫ster

sudo pcs status

 7. Probar conexi√≥n
Desde cualquier m√°quina de la red o desde el otro nodo:

mysql -h 192.168.1.150 -u root -p

üí° Si no puedes conectarte, aseg√∫rate de:

- Que el firewall permite el puerto 3306:
sudo firewall-cmd --permanent --add-port=3306/tcp
sudo firewall-cmd --reload

8. Prueba de Failover
Apaga el nodo activo:

sudo reboot

- Verifica que MariaDB se haya movido autom√°ticamente al otro nodo:

sudo pcs status

-------------------------------------------------------------------
-COMANDO PARA ACCEDER A MARIADB:

sudo MySQL -u root -p

-VER USUARIOS EXISTENTES:

SELECT Host, User FROM Mysql.user;

- COMANDO PARA CREAR UN USUARIO ROOT QUE SE CONECTE DESDE CUALQUIER IP:

CREATE USER 'root'@'%' IDENTIFIED BY 'tu_contrase√±a';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;

 Explicaci√≥n:

'root'@'%': Permite al usuario root conectarse desde cualquier IP o hostname.

GRANT ALL PRIVILEGES: Le da todos los permisos para operar.

FLUSH PRIVILEGES: Aplica los cambios.

-(Opcional) Crear usuario espec√≠fico para node1
Si prefieres restringir acceso solo al nodo1:

CREATE USER 'root'@'node1' IDENTIFIED BY 'tu_contrase√±a';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'node1' WITH GRANT OPTION;
FLUSH PRIVILEGES;

Aseg√∫rate que el hostname node1 se resuelva correctamente en la red. Si no, usa la IP directamente:

CREATE USER 'root'@'192.168.1.10' IDENTIFIED BY 'tu_contrase√±a';

Sal de MariaDB y prueba de nuevo
Desde node1:

mysql -h 192.168.1.150 -u root -p
Ahora deber√≠a conectarte sin problemas si usaste % o la IP espec√≠fica.
